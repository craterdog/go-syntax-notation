!>
................................................................................
.    Copyright (c) 2009-2025 Crater Dog Technologies.  All Rights Reserved.    .
................................................................................
.  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.               .
.                                                                              .
.  This code is free software; you can redistribute it and/or modify it under  .
.  the terms of The MIT License (MIT), as published by the Open Source         .
.  Initiative. (See https://opensource.org/license/MIT)                        .
................................................................................
<!

!>
CRATER DOG SYNTAX NOTATION
This document contains a formal definition of the Crater Dog Syntax Notation™
(CDSN) using CDSN itself in homage to Douglas Hofstadter of Gödel, Escher, Bach
fame.

For more information on CDSN see the wiki at:
  - https://github.com/craterdog/go-syntax-notation/wiki

┌──────────────────────────────────────────────────────────────────────────────┐
│                               RULE DEFINITIONS                               │
└──────────────────────────────────────────────────────────────────────────────┘
<!
$Syntax: Notice comment Rule+ comment Expression+

$Notice: comment newline

$Rule: "$" uppercase ":" Definition

$Definition:
    LiteralValueAlternatives
    TokenNameAlternatives
    RuleNameAlternatives
    SequentialRuleTerms  ! This must be last since it skips newlines.

$LiteralValueAlternatives: LiteralValueAlternative+

$LiteralValueAlternative: newline literal note?

$TokenNameAlternatives: TokenNameAlternative+

$TokenNameAlternative: newline lowercase note?

$RuleNameAlternatives: RuleNameAlternative+

$RuleNameAlternative: newline uppercase note?

$SequentialRuleTerms: Term+ note?

$Term: Component Cardinality?  ! The default cardinality is one.

$Component:
    literal
    lowercase
    uppercase

$Cardinality:
    Constrained
    Quantified

$Constrained:
    "?"
    "*"
    "+"

$Quantified: "{" number Limit? "}"

$Limit: ".." number?  ! The limit of a range of numbers is inclusive.

$Expression: "$" lowercase ":" Pattern note?

$Pattern: Sequence Alternative*

$Alternative: "|" Sequence

$Sequence: Repetition+

$Repetition: Element Cardinality?  ! The default cardinality is one.

$Element:
    Group
    Filter
    Text

$Group: "(" Pattern ")"

$Filter: "~"? "[" Character+ "]"

$Character:
    Implicit
    Explicit

$Implicit: intrinsic

$Explicit: glyph Extent?

$Extent: ".." glyph  ! The extent of a range of glyphs is inclusive.

$Text:
    glyph
    literal
    lowercase
    intrinsic

!>
┌──────────────────────────────────────────────────────────────────────────────┐
│                            EXPRESSION DEFINITIONS                            │
└──────────────────────────────────────────────────────────────────────────────┘
<!
$base16: ['0'..'9' 'a'..'f']

$comment: "!>" EOL (ANY | EOL)* EOL "<!" EOL  ! Chooses the shortest possible match.

$escape: '\' (unicode | ['a' 'b' 'f' 'n' 'r' 't' 'v' '"' '\'])

$glyph: "'" ~[CONTROL] "'"  ! Any printable unicode character.

$intrinsic: "ANY" | "CONTROL" | "DIGIT" | "EOL" | "LOWER" | "UPPER"

$literal: '"' (escape | ~['"' CONTROL])+ '"'

$lowercase: LOWER (DIGIT | LOWER | UPPER)*

$note: "! " ~[CONTROL]*

$number: DIGIT+

$unicode: ('x' base16{2}) | ('u' base16{4}) | ('U' base16{8})

$uppercase: UPPER (DIGIT | LOWER | UPPER)*

