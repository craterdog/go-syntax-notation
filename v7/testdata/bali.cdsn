!>
................................................................................
.    Copyright (c) 2009-2025 Crater Dog Technologies.  All Rights Reserved.    .
................................................................................
.  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.               .
.                                                                              .
.  This code is free software; you can redistribute it and/or modify it under  .
.  the terms of The MIT License (MIT), as published by the Open Source         .
.  Initiative. (See https://opensource.org/license/MIT)                        .
................................................................................
<!

!>
BALI DOCUMENT NOTATION
This document contains a formal definition of the Bali Document Notation™ (Bali)
using Crater Dog Syntax Notation™ (CDSN).

For more information on CDSN see the wiki at:
  - https://github.com/craterdog/go-syntax-notation/wiki

┌──────────────────────────────────────────────────────────────────────────────┐
│                               RULE DEFINITIONS                               │
└──────────────────────────────────────────────────────────────────────────────┘
<!
$Document: Header? Component

$Header: comment

$Component: Entity Parameters? note?

$Entity:
    Element
    Series
    Collection
    Procedure

$Parameters: "(" Association* ")"

$Association: Primitive ":" Component

$Primitive:
    Element
    Series

$Element:
    angle
    boolean
    citation
    duration
    glyph
    moment
    number
    pattern
    percentage
    probability
    resource

$Series:
    binary
    bytecode
    name
    narrative
    quote
    symbol
    tag
    version

$Collection:
    Range
    Empty
    Attributes
    Items  ! Must be after ranges and attributes.

$Range: LeftBracket Primitive ".." Primitive RightBracket

$LeftBracket:
    "["
    "("

$RightBracket:
    "]"
    ")"

$Empty: "[" ":" "]"

$Attributes: "[" Association+ "]"

$Items: "[" Component* "]"

$Procedure: "{" Line* "}"

$Line:
    Annotation
    Statement

$Annotation: comment

$Statement: MainClause OnClause? note?

$MainClause:
    Flow
    Induction
    Messaging
    Repository

$OnClause: "on" Failure MatchingClause+

$MatchingClause: "matching" Template "do" Procedure

$Failure: symbol

$Template: Expression

$Flow:
    IfClause
    SelectClause
    WhileClause
    WithClause
    ContinueClause
    BreakClause
    ReturnClause
    ThrowClause

$Induction:
    DoClause
    LetClause

$Messaging:
    PostClause
    RetrieveClause
    AcceptClause
    RejectClause
    PublishClause

$Repository:
    CheckoutClause
    SaveClause
    DiscardClause
    NotarizeClause

$IfClause: "if" Condition "do" Procedure

$Condition: Expression

$SelectClause: "select" Target MatchingClause+

$Target:
    Function
    Method
    Subcomponent
    Value  ! This must be last since others also begin with an identifier.

$Function: identifier "(" Argument* ")"

$Argument:
    Value
    Primitive

$Value: identifier

$Method: identifier Blocking identifier "(" Argument* ")"

$Blocking:
    dot
    arrow

$Subcomponent: identifier "[" Index+ "]"

$Index:
    Value
    Primitive

$WhileClause: "while" Condition "do" Procedure

$WithClause: "with" "each" Variable "in" Sequence "do" Procedure

$Variable: symbol

$Sequence: Expression

$ContinueClause: "continue" "loop"

$BreakClause: "break" "loop"

$ReturnClause: "return" Result

$Result: Expression

$ThrowClause: "throw" Exception

$Exception: Expression

$DoClause: "do" Invocation

$Invocation:
    Function
    Method

$LetClause: "let" Recipient Assignment Expression

$Assignment:
    ":="
    "?="
    "+="
    "-="
    "*="
    "/="

$Recipient:
    Variable
    Subcomponent

$PostClause: "post" Message "to" Bag

$Message: Expression

$Bag: Expression

$RetrieveClause: "retrieve" Recipient "from" Bag

$AcceptClause: "accept" Message

$RejectClause: "reject" Message

$PublishClause: "publish" Event

$Event: Expression

$CheckoutClause: "checkout" Recipient AtLevel? "from" Cited

$AtLevel: "at" "level" Expression

$Cited: Expression

$SaveClause: "save" Draft "as" Cited

$Draft: Expression

$DiscardClause: "discard" Draft

$NotarizeClause: "notarize" Draft "as" Cited

$Expression: Subject Predicate*

$Subject:
    Component
    Subcomponent
    Precedence
    Referent
    Complement
    Inversion
    Magnitude
    Function
    Method
    Value  ! This must be last since others also begin with an identifier.

$Predicate: Operation Expression

$Operation:
    Textual
    Logic
    Arithmetic
    Comparison

$Textual:
    "&"
    "is"
    "matches"

$Logic:
    "and"
    "san"
    "ior"
    "xor"

$Arithmetic:
    plus
    minus
    star
    slash
    percent
    caret

$Comparison:
    less
    equal
    more

$Precedence: "(" Expression ")"

$Referent: "@" Indirect

$Indirect:
    Component
    Subcomponent
    Referent
    Function
    Method
    Value  ! This must be last since others also begin with an identifier.

$Complement: "not" Logical

$Logical:
    Component
    Subcomponent
    Precedence
    Referent
    Complement
    Function
    Method
    Value  ! This must be last since others also begin with an identifier.

$Inversion: Inverse Numerical

$Inverse:
    minus
    slash
    star

$Numerical:
    Component
    Subcomponent
    Precedence
    Referent
    Inversion
    Magnitude
    Function
    Method
    Value  ! This must be last since others also begin with an identifier.

$Magnitude: "|" Numerical "|"

!>
┌──────────────────────────────────────────────────────────────────────────────┐
│                            EXPRESSION DEFINITIONS                            │
└──────────────────────────────────────────────────────────────────────────────┘
<!
$alpha: ['A'..'Z' 'a'..'z']

$alphanumeric: alpha | base10

$amplitude: ('0' fraction | ordinal fraction? | transcendental) exponent?

$angle: '~' ('0' | amplitude)

$authority: ~['/' CONTROL]+

$base10: ['0'..'9']

$base16: base10 | ['a'..'f']

$base32: base10 | ['A'..'D' 'F'..'H' 'J'..'N' 'P'..'T' 'V'..'Z']

$base64: alphanumeric | ['+' '/']

$binary: "'>" (EOL block+)? ' '* "<'"

$block: ' '* base64{1..60} EOL

$boolean: "false" | "true"

$glyph: "'" (escape | ~[CONTROL]) "'"  ! Must be declared before bytecode.

$bytecode: "'" (instruction (' ' instruction)*)? "'"

$character: escape | '\' '"' | ~['"' CONTROL]

$citation: name '@' version

$comment: "!>" EOL (ANY | EOL)* EOL ' '* "<!"  ! Chooses the shortest match.

$day: (['0'..'2'] ['1'..'9']) | ('3' ['0'..'1'])

$days: timespan 'D'

$duration: '~' sign? 'P' (weeks | (years? months? days? ('T' hours? minutes? seconds?)?))

$escape: '\' (unicode | ['a' 'b' 'f' 'n' 'r' 't' 'v' '\'])

$exponent: 'E' sign? ordinal

$float: sign? amplitude

$fraction: '.' base10+

$fragment: ~['>' CONTROL]*

$hour: (['0'..'1'] ['0'..'9']) | ('2' ['0'..'3'])

$hours: timespan 'H'

$imaginary: sign? amplitude 'i'

$infinity: sign? ("infinity" | '∞')

$instruction: base16{4}

$letter: LOWER | UPPER

$minute: ['0'..'5'] ['0'..'9']

$minutes: timespan 'M'

$moment: '<' sign? year ('-' month ('-' day ('T' hour (':' minute (':' second fraction?)?)?)?)?)? '>'

$month: ('0' ['1'..'9']) | ('1' ['0'..'2'])

$months: timespan 'M'

$name: ('/' identifier)+

$narrative: '"' '>' EOL (ANY | EOL)* EOL ' '* '<' '"'  ! Chooses the shortest match.

$note: "! " ~[CONTROL]*

$ordinal: ['1'..'9'] base10*

$path: ~['?' '#' '>' CONTROL]*

$pattern: "none" | regex | "any"

$percentage: real '%'

$probability: fraction | "one"

$polar: amplitude "e^" angle? 'i'

$query: ~['#' '>' CONTROL]*

$quote: '"' character* '"'

$real: '0' | float | infinity | undefined

$rectangular: float sign float? 'i'

$number: polar | rectangular | imaginary | real  ! Must be after other numerics.

$regex: '"' character+ '"' '?'

$resource: '<' scheme ':' ("//" authority)? '/' path ('?' query)? ('#' fragment)? '>'

$scheme: alpha (alphanumeric | '+' | '-' | '.')*

$second: (['0'..'5'] ['0'..'9']) | ('6' ['0'..'1'])

$seconds: timespan 'S'

$sign: '+' | '-'

$symbol: '$' identifier

$tag: '#' base32+

$timespan: '0' | (ordinal fraction?)

$transcendental: "e" | "pi" | 'π' | "tau" | 'τ' | "phi" | 'φ'

$undefined: "undefined"

$unicode: ('u' base16{4}) | ('U' base16{8})

$version: 'v' ordinal ('.' ordinal)*

$weeks: timespan 'W'

$year: '0' | ordinal

$years: timespan 'Y'

$identifier: letter (letter | DIGIT)*  ! Must be after all alphanumeric expressions.

$arrow: "<-"

$less: "<"

$equal: "="

$more: ">"

$plus: "+"

$minus: "-"

$star: "*"

$slash: "/"

$percent: "%"

$caret: "^"

$dot: "."

