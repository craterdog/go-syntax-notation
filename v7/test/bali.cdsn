!>
................................................................................
.    Copyright (c) 2009-2025 Crater Dog Technologies.  All Rights Reserved.    .
................................................................................
.  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.               .
.                                                                              .
.  This code is free software; you can redistribute it and/or modify it under  .
.  the terms of The MIT License (MIT), as published by the Open Source         .
.  Initiative. (See https://opensource.org/license/MIT)                        .
................................................................................
<!

!>
BALI DOCUMENT NOTATION
This document contains a formal definition of the Bali Document Notation™ (Bali)
using Crater Dog Syntax Notation™ (CDSN).

For more information on CDSN see the wiki at:
  - https://github.com/craterdog/go-syntax-notation/wiki

┌──────────────────────────────────────────────────────────────────────────────┐
│                               RULE DEFINITIONS                               │
└──────────────────────────────────────────────────────────────────────────────┘
<!
$Document: Component Parameters? note?

$Component:
    Element
    String
    Range
    Collection
    Procedure

$Parameters: "(" Association+ ")"

$Association: Primitive ":" Document

$Primitive:
    Element
    String

$Element:
    angle
    boolean
    duration
    glyph
    moment
    number
    percentage
    probability
    resource
    symbol

$String:
    binary
    bytecode
    name
    narrative
    pattern
    quote
    tag
    version

$Range: Bra Primitive ".." Primitive Ket

$Bra:
    "["
    "("

$Ket:
    "]"
    ")"

$Collection:
    Attributes
    Items  ! Must be after attributes.

$Attributes: "[" Association+ "]"

$Items: "[" Entity* "]"

$Entity: Document

$Procedure: "{" Line* "}"

$Line:
    Annotation
    Statement

$Annotation:
    note
    comment

$Statement: MainClause OnClause?

$MainClause:
    FlowControl
    ActionInduction
    MessageHandling
    RepositoryAccess

$OnClause: "on" Failure MatchingClause+

$Failure: symbol

$MatchingClause: "matching" Template "do" Procedure

$Template: Expression

$FlowControl:
    IfClause
    SelectClause
    WhileClause
    WithClause
    ContinueClause
    BreakClause
    ReturnClause
    ThrowClause

$ActionInduction:
    DoClause
    LetClause

$MessageHandling:
    PostClause
    RetrieveClause
    AcceptClause
    RejectClause
    PublishClause

$RepositoryAccess:
    CheckoutClause
    SaveClause
    DiscardClause
    NotarizeClause

$IfClause: "if" Condition "do" Procedure

$Condition: Expression

$SelectClause: "select" Target MatchingClause+

$Target:
    Function
    Method
    Subcomponent
    Value  ! This must be last since others also begin with an identifier.

$Function: identifier "(" Argument* ")"

$Method: identifier Invoke identifier "(" Argument* ")"

$Invoke:
    "<-"
    "<~"

$Argument:
    Value
    Primitive

$Value: identifier

$Subcomponent: identifier "[" Index+ "]"

$Index:
    Value
    Primitive

$WhileClause: "while" Condition "do" Procedure

$WithClause: "with" "each" Variable "in" Sequence "do" Procedure

$Variable: symbol

$Sequence: Expression

$ContinueClause: "continue" "loop"

$BreakClause: "break" "loop"

$ReturnClause: "return" Result

$Result: Expression

$ThrowClause: "throw" Exception

$Exception: Expression

$DoClause: "do" Invocation

$Invocation:
    Function
    Method

$LetClause: "let" Recipient Assignment Expression

$Assignment:
    ":="
    "?="
    "+="
    "-="
    "*="
    "/="

$Recipient:
    Variable
    Subcomponent

$PostClause: "post" Message "to" Bag

$Message: Expression

$Bag: Expression

$RetrieveClause: "retrieve" Recipient "from" Bag

$AcceptClause: "accept" Message

$RejectClause: "reject" Message

$PublishClause: "publish" Event

$Event: Expression

$CheckoutClause: "checkout" Recipient AtLevel? "from" Cited

$AtLevel: "at" "level" Expression

$Cited: Expression

$SaveClause: "save" Draft "as" Cited

$Draft: Expression

$DiscardClause: "discard" Draft

$NotarizeClause: "notarize" Draft "as" Cited

$Expression: Subject Predicate*

$Subject:
    Document
    Subcomponent
    Precedence
    Referent
    Complement
    Inversion
    Magnitude
    Function
    Method
    Value  ! This must be last since others also begin with an identifier.

$Predicate: Operation Expression

$Operation:
    LexicalOperator
    LogicalOperator
    ArithmeticOperator
    ComparisonOperator

$LexicalOperator:
    "&"

$LogicalOperator:
    "and"
    "san"
    "ior"
    "xor"

$ArithmeticOperator:
    "+"
    "-"
    "*"
    "/"
    "%"
    "^"

$ComparisonOperator:
    "<"
    "="
    ">"
    "is"
    "matches"

$Precedence: "(" Expression ")"

$Referent: "@" Indirect

$Indirect:
    Document
    Subcomponent
    Referent
    Function
    Method
    Value  ! This must be last since others also begin with an identifier.

$Complement: "not" Logical

$Logical:
    Document
    Subcomponent
    Precedence
    Referent
    Complement
    Function
    Method
    Value  ! This must be last since others also begin with an identifier.

$Inversion: Inverse Numerical

$Inverse:
    "-"
    "/"
    "*"

$Numerical:
    Document
    Subcomponent
    Precedence
    Referent
    Inversion
    Magnitude
    Function
    Method
    Value  ! This must be last since others also begin with an identifier.

$Magnitude: "|" Expression "|"

!>
┌──────────────────────────────────────────────────────────────────────────────┐
│                            EXPRESSION DEFINITIONS                            │
└──────────────────────────────────────────────────────────────────────────────┘
<!
$angle: '~' ('0' | AMPLITUDE)

$binary: "'>" (EOL (SPACE* BASE64{2..60} EOL)+ SPACE*)? "<'"

$boolean: "false" | "true"

$bytecode: "'>" EOL (SPACE* INSTRUCTION{1..12} EOL)+ SPACE* "<'"

$comment: "!>" EOL (ANY | EOL)+ EOL SPACE* "<!"  ! Chooses the shortest match.

$duration: "~P" (WEEKS | (YEARS? MONTHS? DAYS? ('T' HOURS? MINUTES? SECONDS?)?))

$glyph: "'" (ESCAPE | ~[CONTROL]) "'"

$moment: '<' SIGN? YEAR ('-' MONTH ('-' DAY ('T' HOUR (':' MINUTE (':' SECOND FRACTION?)?)?)?)?)? '>'

$name: ('/' identifier)+

$narrative: "\">" EOL (ANY | EOL)+ EOL SPACE* "<\""  ! Chooses the shortest match.

$note: "! " ~[CONTROL]*

$pattern: "none" | REGEX | "any"

$percentage: REAL '%'

$probability: 'p' ('0' FRACTION? | "1")

$quote: '"' CHARACTER* '"'

$resource: '<' SCHEME ':' ("//" AUTHORITY)? '/' PATH ('?' QUERY)? ('#' FRAGMENT)? '>'

$symbol: '$' identifier

$tag: '#' BASE32{13..}

$version: 'v' ORDINAL ('.' ORDINAL)*

$number: POLAR | RECTANGULAR | IMAGINARY | REAL  ! Must be after other numerics.

$identifier: LETTER (LETTER | DIGIT | '-')*  ! Must be last alphanumeric expression.

!>
┌──────────────────────────────────────────────────────────────────────────────┐
│                             FRAGMENT DEFINITIONS                             │
└──────────────────────────────────────────────────────────────────────────────┘
<!
$ALPHA: ['A'..'Z' 'a'..'z']

$ALPHANUMERIC: ALPHA | BASE10

$AMPLITUDE: ('0' FRACTION | ORDINAL FRACTION? | TRANSCENDENTAL) EXPONENT?

$AUTHORITY: ~['/' CONTROL]+

$BASE10: ['0'..'9']

$BASE16: BASE10 | ['a'..'f']

$BASE32: BASE10 | ['A'..'D' 'F'..'H' 'J'..'N' 'P'..'T' 'V'..'Z']

$BASE64: ALPHANUMERIC | ['+' '/']

$CHARACTER: ESCAPE | '\' '"' | ~['"' CONTROL]

$DAY: (['0'..'2'] ['1'..'9']) | ('3' ['0'..'1'])

$DAYS: TIMESPAN 'D'

$ESCAPE: '\' (UNICODE | ['a' 'b' 'f' 'n' 'r' 't' 'v' '\'])

$EXPONENT: 'E' SIGN? ORDINAL

$FLOAT: SIGN? AMPLITUDE

$FRACTION: '.' BASE10+

$FRAGMENT: ~['>' CONTROL]*

$HOUR: (['0'..'1'] ['0'..'9']) | ('2' ['0'..'3'])

$HOURS: TIMESPAN 'H'

$IMAGINARY: FLOAT 'i'

$INFINITY: SIGN? ("infinity" | '∞')

$INSTRUCTION: ':' BASE16{4}

$LETTER: LOWER | UPPER

$MINUTE: ['0'..'5'] ['0'..'9']

$MINUTES: TIMESPAN 'M'

$MONTH: ('0' ['1'..'9']) | ('1' ['0'..'2'])

$MONTHS: TIMESPAN 'M'

$ORDINAL: ['1'..'9'] BASE10*

$PATH: ~['?' '#' '>' CONTROL]*

$POLAR: AMPLITUDE "e^" ('~' ('0' | AMPLITUDE))? 'i'

$QUERY: ~['#' '>' CONTROL]*

$REAL: FLOAT | '0' | INFINITY | UNDEFINED

$RECTANGULAR: SIGN? AMPLITUDE SIGN AMPLITUDE 'i'

$REGEX: '"' CHARACTER+ '"' '?'

$SCHEME: ALPHA (ALPHANUMERIC | '+' | '-' | '.')*

$SECOND: (['0'..'5'] ['0'..'9']) | ('6' ['0'..'1'])

$SECONDS: TIMESPAN 'S'

$SIGN: '+' | '-'

$SPACE: ' '+

$TIMESPAN: '0' | (ORDINAL FRACTION?)

$TRANSCENDENTAL: "e" | "pi" | 'π' | "tau" | 'τ' | "phi" | 'φ'

$UNDEFINED: "undefined"

$UNICODE: ('u' BASE16{4}) | ('U' BASE16{8})

$WEEKS: TIMESPAN 'W'

$YEAR: '0' | ORDINAL

$YEARS: TIMESPAN 'Y'

