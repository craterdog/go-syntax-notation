!>
................................................................................
.    Copyright (c) 2009-2025 Crater Dog Technologies.  All Rights Reserved.    .
................................................................................
.  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.               .
.                                                                              .
.  This code is free software; you can redistribute it and/or modify it under  .
.  the terms of The MIT License (MIT), as published by the Open Source         .
.  Initiative. (See https://opensource.org/license/MIT)                        .
................................................................................
<!

!>
GO CLASS MODEL NOTATION
This document contains a formal definition of the Go Class Model Notation™
(GCMN) using Crater Dog Syntax Notation™ (CDSN).

For more information on CDSN see the wiki at:
  - https://github.com/craterdog/go-syntax-notation/wiki

┌──────────────────────────────────────────────────────────────────────────────┐
│                               RULE DEFINITIONS                               │
└──────────────────────────────────────────────────────────────────────────────┘
<!
$Model: PackageDeclaration PrimitiveDeclarations InterfaceDeclarations

$PackageDeclaration: LegalNotice PackageHeader PackageImports

$PrimitiveDeclarations: TypeSection FunctionalSection

$InterfaceDeclarations: ClassSection InstanceSection AspectSection

$LegalNotice: comment

$PackageHeader: comment "package" name

$PackageImports: "import" "(" ImportList? ")"

$ImportList: ImportedPackage+

$ImportedPackage: name path

$TypeSection: "// TYPE DECLARATIONS" TypeDeclaration*

$TypeDeclaration: Declaration Abstraction Enumeration?

$Declaration: comment "type" name Constraints?

$Constraints: "[" Constraint AdditionalConstraint* "]"

$Constraint: name Abstraction

$AdditionalConstraint: "," Constraint

$Abstraction: Wrapper? Type

$Wrapper:
    Dots
    Star
    Array
    Channel
    Map

$Dots: "..."

$Star: "*"

$Array: "[" "]"

$Channel: "chan"

$Map: "map" "[" name "]"

$Type:
    Named
    Functional

$Named: prefix? name Arguments?

$Functional: "func" "(" ParameterList? ")" Result?

$Arguments: "[" Argument AdditionalArgument* "]"

$Argument: Abstraction

$AdditionalArgument: "," Argument

$Enumeration: "const" "(" Value AdditionalValue* ")"

$Value: name Abstraction "=" "iota"

$AdditionalValue: name

$FunctionalSection: "// FUNCTIONAL DECLARATIONS" FunctionalDeclaration*

$FunctionalDeclaration: Declaration Functional

$ParameterList: Parameter+

$Parameter: name Abstraction ","

$Result:
    None
    Abstraction
    Multivalue

$None: newline  ! A hack to work-around a flaw in the Go language syntax.

$Multivalue: "(" ParameterList ")"

$ClassSection: "// CLASS DECLARATIONS" ClassDeclaration+

$ClassDeclaration: Declaration "interface" "{" ClassMethods "}"

$ClassMethods: ConstructorSubsection ConstantSubsection? FunctionSubsection?

$ConstructorSubsection: "// Constructor Methods" ConstructorMethod+

$ConstructorMethod: name "(" ParameterList? ")" Abstraction

$ConstantSubsection: "// Constant Methods" ConstantMethod+

$ConstantMethod: name "(" ")" Abstraction

$FunctionSubsection: "// Function Methods" FunctionMethod+

$FunctionMethod: name "(" ParameterList? ")" Result

$InstanceSection: "// INSTANCE DECLARATIONS" InstanceDeclaration+

$InstanceDeclaration: Declaration "interface" "{" InstanceMethods "}"

$InstanceMethods: PrincipalSubsection AttributeSubsection? AspectSubsection?

$PrincipalSubsection: "// Principal Methods" PrincipalMethod+

$PrincipalMethod: Method

$Method: name "(" ParameterList? ")" Result

$AttributeSubsection: "// Attribute Methods" AttributeMethod+

$AttributeMethod:
    GetterMethod
    SetterMethod

$GetterMethod: name "(" ")" Abstraction

$SetterMethod: name "(" Parameter ")"

$AspectSubsection: "// Aspect Interfaces" AspectInterface+

$AspectInterface: Abstraction

$AspectSection: "// ASPECT DECLARATIONS" AspectDeclaration*

$AspectDeclaration: Declaration "interface" "{" AspectMethod+ "}"

$AspectMethod: Method

!>
┌──────────────────────────────────────────────────────────────────────────────┐
│                            EXPRESSION DEFINITIONS                            │
└──────────────────────────────────────────────────────────────────────────────┘
<!
$character: LOWER | UPPER

$comment: "/*" EOL (ANY | EOL)* EOL "*/" EOL  ! Chooses the shortest possible match.

$path: '"' ~[CONTROL]* '"'

$prefix: character ALPHANUMERIC{2} '.'

$name: character ALPHANUMERIC* '_'?  ! Must be declared after prefix.

!>
┌──────────────────────────────────────────────────────────────────────────────┐
│                             FRAGMENT DEFINITIONS                             │
└──────────────────────────────────────────────────────────────────────────────┘
<!
$ALPHANUMERIC: LOWER | UPPER | DIGIT

