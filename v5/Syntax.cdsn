!>
................................................................................
.    Copyright (c) 2009-2024 Crater Dog Technologies.  All Rights Reserved.    .
................................................................................
.  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.               .
.                                                                              .
.  This code is free software; you can redistribute it and/or modify it under  .
.  the terms of The MIT License (MIT), as published by the Open Source         .
.  Initiative. (See https://opensource.org/license/MIT)                        .
................................................................................
<!

!>
CRATER DOG SYNTAX NOTATION
This document contains a formal definition of the Crater Dog Syntax Notation™
(CDSN) using CDSN itself in homage to Douglas Hofstadter of Gödel, Escher, Bach
fame.

A language syntax consists of a set of rule definitions and regular expression
patterns.

Most terms within a rule definition can be constrained by one of the following
cardinalities:
  - term{M} - Exactly M instances of the specified term.
  - term{M..N} - M to N instances of the specified term.
  - term{M..} - M or more instances of the specified term.
  - term* - Zero or more instances of the specified term.
  - term+ - One or more instances of the specified term.
  - term? - An optional term.

The following intrinsic character types may be used within regular expression
pattern declarations:
  - ANY - Any language specific character.
  - LOWER - Any language specific lowercase character.
  - UPPER - Any language specific uppercase character.
  - DIGIT - Any language specific digit.
  - CONTROL - Any environment specific (non-printable) control character.
  - EOL - The environment specific end-of-line character.

The excluded "~" prefix within a regular expression pattern may only be applied
to a filtered set of possible characters.

RULE DEFINITIONS
The following rules are used by the parser when parsing the stream of tokens
generated by the scanner based on the expression patterns.  Each rule name
begins with an uppercase letter.  The rule definitions may specify the names of
expressions or other rules and are matched by the parser in the order listed.  A
rule definition may also be directly or indirectly recursive.  The parsing of
tokens is greedy and will match as many repeated token types as possible. The
sequence of terms within in a rule definition may be separated by spaces which
are ignored by the parser.  Newlines are also ignored unless explicitly
specified as terms in one or more rule definitions.
<!
$Syntax: Notice comment Rule+ comment Expression+

$Notice: comment

$Rule: "$" uppercase ":" Definition

$Definition:
  - Multiline
  - Inline

$Multiline: Line+

$Line: "-" Identifier note?

$Identifier:
  - lowercase
  - uppercase

$Inline: Term+ note?

$Term:
  - Reference
  - literal

$Reference: Identifier Cardinality?  ! The default cardinality is one.

$Cardinality:
  - Constrained
  - Quantified

$Constrained:
  - optional
  - repeated

$Quantified: "{" number Limit? "}"

$Limit: ".." number?  ! The limit of a range of numbers is inclusive.

$Expression: "$" lowercase ":" Pattern note?

$Pattern: Option Alternative*

$Alternative: "|" Option

$Option: Repetition+

$Repetition: Element Cardinality?  ! The default cardinality is one.

$Element:
  - Group
  - Filter
  - Text

$Group: "(" Pattern ")"

$Filter: excluded? "[" Character+ "]"

$Character:
  - Explicit
  - intrinsic

$Explicit: glyph Extent?

$Extent: ".." glyph  ! The extent of a range of glyphs is inclusive.

$Text:
  - intrinsic
  - glyph
  - literal
  - lowercase

!>
EXPRESSION PATTERNS
The following regular expression patterns are used by the scanner to generate
a stream of tokens—each a match of a regular expression—that are to be processed
by the parser.  Each regular expression name begins with a lowercase letter.
Unlike rule definitions, a regular expression pattern cannot specify the name of
a rule within its pattern—but it may specify the name of another regular
expression.  Regular expression patterns cannot be recursive and the scanning of
patterns is greedy unless the pattern contains the ANY intrinsic character.  Any
spaces within a regular expression pattern are part of the regular expression
and are NOT ignored.
<!
$base16: ['0'..'9' 'a'..'f']

$comment: "!>" EOL (ANY | EOL)* EOL "<!" EOL  ! Chooses the shortest possible match.

$escape: '\' (unicode | ['a' 'b' 'f' 'n' 'r' 't' 'v' '"' '\'])

$excluded: "~"

$glyph: "'" ~[CONTROL] "'"  ! Any printable unicode character.

$intrinsic: "ANY" | "CONTROL" | "DIGIT" | "EOL" | "LOWER" | "UPPER"

$literal: '"' (escape | ~['"' CONTROL])+ '"'

$lowercase: LOWER (DIGIT | LOWER | UPPER)*

$note: "! " ~[CONTROL]*

$number: DIGIT+

$optional: "?"

$repeated: "*" | "+"

$unicode: ('x' base16{2}) | ('u' base16{4}) | ('U' base16{8})

$uppercase: UPPER (DIGIT | LOWER | UPPER)*

